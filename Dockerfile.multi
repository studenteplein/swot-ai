# Dockerfile.multi
# v0.7.10 - AMD64 Ultra-Optimized for Ubuntu/DigitalOcean

# Platform arguments - force AMD64
ARG BUILDPLATFORM=linux/amd64
ARG TARGETPLATFORM=linux/amd64

# Base stage with essential dependencies only - FORCE AMD64
FROM --platform=$TARGETPLATFORM node:20-alpine AS base-min
# Single RUN layer for all system dependencies
RUN apk add --no-cache \
    jemalloc \
    python3 \
    make \
    g++ \
    libc6-compat \
    curl \
    && rm -rf /var/cache/apk/*

# Set optimal environment variables
ENV LD_PRELOAD=/usr/lib/libjemalloc.so.2 \
    NODE_OPTIONS="--max-old-space-size=4096" \
    NPM_CONFIG_AUDIT=false \
    NPM_CONFIG_FUND=false \
    NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT=600000 \
    NPM_CONFIG_FETCH_RETRIES=5 \
    NPM_CONFIG_FETCH_RETRY_MINTIMEOUT=15000 \
    NPM_CONFIG_MAXSOCKETS=1 \
    NPM_CONFIG_REGISTRY=https://registry.npmjs.org/

WORKDIR /app

# Copy package files in optimal order for layer caching
COPY package*.json ./
COPY packages/data-provider/package*.json ./packages/data-provider/
COPY packages/mcp/package*.json ./packages/mcp/
COPY packages/data-schemas/package*.json ./packages/data-schemas/
COPY client/package*.json ./client/
COPY api/package*.json ./api/

# Dependencies stage - install all deps once with maximum optimization
FROM base-min AS deps
WORKDIR /app
# Install all dependencies with ultra-fast settings
RUN --mount=type=cache,target=/root/.npm \
    npm ci --include=dev --prefer-offline

# Production dependencies only (separate stage for final image)
FROM base-min AS prod-deps  
WORKDIR /app
# Install production deps with cache mount for speed
RUN --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev --prefer-offline

# Build data-provider
FROM deps AS data-provider-build
WORKDIR /app/packages/data-provider
COPY packages/data-provider ./
RUN npm run build

# Build mcp package
FROM deps AS mcp-build
WORKDIR /app/packages/mcp
COPY packages/mcp ./
COPY --from=data-provider-build /app/packages/data-provider/dist /app/packages/data-provider/dist
RUN npm run build

# Build data-schemas
FROM deps AS data-schemas-build
WORKDIR /app/packages/data-schemas
COPY packages/data-schemas ./
COPY --from=data-provider-build /app/packages/data-provider/dist /app/packages/data-provider/dist
RUN npm run build

# Client build - optimized for speed
FROM deps AS client-build
WORKDIR /app/client
COPY client ./
COPY --from=data-provider-build /app/packages/data-provider/dist /app/packages/data-provider/dist
# Maximum memory allocation and optimizations for AMD64
ENV NODE_OPTIONS="--max-old-space-size=8192 --no-warnings --experimental-vm-modules" \
    GENERATE_SOURCEMAP=false \
    CI=false \
    VITE_BUILD_PARALLEL=true
# Use parallel processing for faster builds
RUN npm run build

# Final production image - runtime optimized - FORCE AMD64
FROM --platform=$TARGETPLATFORM node:20-alpine AS production
# Add `uv` for extended MCP support - FORCE AMD64
COPY --from=ghcr.io/astral-sh/uv:0.6.13 /uv /uvx /bin/
RUN uv --version
# Install runtime dependencies
RUN apk add --no-cache jemalloc curl && rm -rf /var/cache/apk/*
ENV LD_PRELOAD=/usr/lib/libjemalloc.so.2
# Optimize Node.js for production
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048"
WORKDIR /app
# Copy pre-installed production dependencies
COPY --from=prod-deps /app/node_modules ./node_modules
COPY --from=prod-deps /app/packages/data-provider/node_modules ./packages/data-provider/node_modules
COPY --from=prod-deps /app/packages/mcp/node_modules ./packages/mcp/node_modules
COPY --from=prod-deps /app/packages/data-schemas/node_modules ./packages/data-schemas/node_modules
COPY --from=prod-deps /app/api/node_modules ./api/node_modules
# Copy package.json files for proper workspace structure
COPY package*.json ./
COPY packages/data-provider/package*.json ./packages/data-provider/
COPY packages/mcp/package*.json ./packages/mcp/
COPY packages/data-schemas/package*.json ./packages/data-schemas/
COPY api/package*.json ./api/
# Copy application code and built assets - Updated for MCP
COPY api ./api
COPY config ./config
COPY librechat.yaml ./librechat.yaml
COPY custom_mcp_servers ./custom_mcp_servers
COPY --from=data-provider-build /app/packages/data-provider/dist ./packages/data-provider/dist
COPY --from=mcp-build /app/packages/mcp/dist ./packages/mcp/dist
COPY --from=data-schemas-build /app/packages/data-schemas/dist ./packages/data-schemas/dist
COPY --from=client-build /app/client/dist ./client/dist
# Install workspace dependencies to link packages properly
RUN --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev --prefer-offline
# Create logs directory and set proper ownership and permissions
RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001 && \
    mkdir -p /app/api/logs && \
    chmod +x /app/custom_mcp_servers/elastic-mcp && \
    chown -R nextjs:nodejs /app
USER nextjs
WORKDIR /app/api
EXPOSE 3080
ENV HOST=0.0.0.0
ENV PORT=3080
# Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3080/health || exit 1
CMD ["node", "server/index.js"]